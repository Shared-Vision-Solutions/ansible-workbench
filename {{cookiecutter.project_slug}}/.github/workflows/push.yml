---
name: {{ cookiecutter.project_slug }}-push

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)

on:
  push:
  workflow_dispatch:

env:
  PROJECT_NAME: "{{ cookiecutter.project_slug }}"
  USERNAME: "{{ cookiecutter.github_handle }}"
  VERBOSE_NOTIFICATIONS: 0

{% raw %}
jobs:

  _create_python_versions:

    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.create_matrix.outputs.python-versions }}

    steps:
      - name: Create Python Versions -- Set Configured Python Versions as Output
        id: create_matrix
        run: |
          echo 'python-versions={% endraw %}{{ cookiecutter._GITHUB_CI_PYTHON_VERSIONS | tojson }}{% raw %}' >> $GITHUB_OUTPUT

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Success -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  create_release:
    needs: [_create_python_versions, _start_notification, documentation_test, molecule_lint_test, molecule_test, security_test, yaml_lint_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Create Release -- Branch Filter
        id: branch_filter
        run: |
          source .github/scripts/branch_filter.sh "${{ github.event.ref }}"

      - name: Create Release -- Checkout Repository (All Commits)
        if: steps.branch_filter.outputs.match == 'TRUE'
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Install Poetry
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/poetry.sh "install-poetry"

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.branch_filter.outputs.match == 'TRUE'
        run:
          source ./.github/scripts/changelog.sh

      - name: Create Release -- Create Github Release
        if: steps.branch_filter.outputs.match == 'TRUE'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ env.CHANGE_LOG_CONTENT }}
          draft: true
          prerelease: false

      - name: Create Release -- Report Job Status (Success)
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:

      - name: Documentation Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Documentation Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_MARKDOWN_LINK_CHECK }}{% raw %}
        with:
          config-file: './github/config/markdown.link.check.json'
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation test was successful!"

      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation test has failed!"

  molecule_lint_test:
    needs: [_create_python_versions]

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(needs._create_python_versions.outputs.python-versions) }}

    steps:

      - name: Molecule Lint Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          path: "role"

      - name: Molecule Lint Test -- Setup Environment
        run: |
          source ./role/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Lint Test -- Set up Python ${{ matrix.python-version }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Molecule Lint Test -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh "install-poetry"

      - name: Molecule Lint Test -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./role/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                        \
            ~/.cache

      - name: Molecule Lint Test -- Mount Ansible Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: ansible-${{ hashFiles('./role/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Molecule Lint Test -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Molecule Lint Test -- Install Requirements
        run: |
          cd role
          source ./.github/scripts/poetry.sh "install-project"

      - name: Molecule Lint Test -- Run Linter
        run: |
          cd role
          poetry run molecule lint

      - name: Molecule Lint Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: molecule linting was successful!"

      - name: Molecule Lint Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: molecule linting has failed!"

  molecule_test:
    needs: [_create_python_versions]

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(needs._create_python_versions.outputs.python-versions) }}

    steps:
      - name: Molecule Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          path: "role"

      - name: Molecule Test -- Setup Environment
        run: |
          source ./role/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Test -- Set up Python ${{ matrix.python-version }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Molecule Test -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh "install-poetry"

      - name: Molecule Test -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./role/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                        \
            ~/.cache

      - name: Molecule Test -- Mount Ansible Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: ansible-${{ hashFiles('./role/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Molecule Test -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Molecule Test -- Install Requirements
        run: |
          cd role
          source ./.github/scripts/poetry.sh "install-project"

      - name: Molecule Test -- Run docker1 Scenario
        run: |
          cd role
          poetry run molecule test -s docker1

      - name: Molecule Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: molecule test was successful!"

      - name: Molecule Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: molecule test has failed!"

  security_test:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          source ./.github/scripts/pushed_commit_range.sh
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Trufflehog
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_TRUFFLEHOG }}{% raw %}
        with:
          path: .
          base: ${{ env.PUSHED_COMMIT_RANGE }}
          head: ${{ env.BRANCH_OR_TAG }}

      - name: Security Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  yaml_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Yaml Lint Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Yaml Lint Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Yaml Lint Test -- Lint Rendered GitHub Workflows
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_YAMLLINT }}{% raw %}
        with:
          format: standard
          file_or_dir: .github/workflows/
          config_file: .yamllint.yml

      - name: Yaml Lint Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"

      - name: Yaml Lint Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
{% endraw %}