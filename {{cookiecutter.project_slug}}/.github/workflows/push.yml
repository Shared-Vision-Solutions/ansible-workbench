---
name: {{ cookiecutter.project_slug }}-push

# This workflow is configured by values found in the .github/config/workflows/push.json file.
# It's encouraged to explore the configuration before customizing this file.
# This will allow you to upgrade to future versions of this template without complications.

# For further details please consult the documentation here:
# https://github.com/niall-byrne/ansible-workbench

# Workflow Secrets:
# SLACK_WEBHOOK              (Optional, for Slack notifications...)

on:
  push:
  workflow_dispatch:

env:
  PROJECT_NAME: "{{ cookiecutter.project_slug }}"
  USER_NAME: "{{ cookiecutter.github_handle }}"
  VERBOSE_NOTIFICATIONS: 0

{% raw %}
jobs:

  _create_configuration:

    runs-on: ubuntu-latest
    outputs:
      commitizen-rev-range: ${{ steps.commitizen-rev-range.outputs.json_value }}
      molecule-test-platforms: ${{ steps.molecule-test-platforms.outputs.json_value }}
      molecule-scenarios: ${{ steps.molecule-scenarios.outputs.json_value }}
      python-versions: ${{ steps.python-versions.outputs.json_value }}
      trufflehog-args: ${{ steps.trufflehog-args.outputs.json_value }}


    steps:
      - name: Create Configuration -- Checkout Repository
        uses: actions/checkout@v3

      - name: Create Configuration -- Validate the 'push.json' File
        run: |
          python -m json.tool .github/config/workflows/push.json >> /dev/null

      - name: Create Configuration -- Set Commitzen Rev Range as Output
        id: commitizen-rev-range
        run: |
          source .github/scripts/workflow_json_value.sh jq -rM .ci_commitzen_rev_range .github/config/workflows/push.json

      - name: Create Configuration -- Set Molecule Test Scenarios as Output
        id: molecule-scenarios
        run: |
          EXCLUDED="$(jq -rM .ci_molecule_excluded_scenarios_regex .github/config/workflows/push.json)"
          SCENARIOS=($(find molecule/* -maxdepth 0 -type d -not -name "default" -not -name "${EXCLUDED}" -exec basename {} \;))
          source .github/scripts/workflow_json_value.sh jq -M --null-input '$ARGS.positional' --args "${SCENARIOS[@]}"

      - name: Create Configuration -- Set Molecule Test Platforms as Output
        id: molecule-test-platforms
        run: |
          source .github/scripts/workflow_json_value.sh jq -M .ci_molecule_test_platforms .github/config/workflows/push.json

      - name: Create Configuration -- Set Python Versions as Output
        id: python-versions
        run: |
          source .github/scripts/workflow_json_value.sh jq -M .ci_python_versions .github/config/workflows/push.json

      - name: Create Configuration -- Set TruffleHog Extra Args as Output
        id: trufflehog-args
        run: |
          source .github/scripts/workflow_json_value.sh jq -rM .ci_trufflehog_extra_scan_args .github/config/workflows/push.json

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Success -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  commit_lint_test:
    needs: [_create_configuration]

    runs-on: ubuntu-latest
    env:
      ANSIBLE_WORKBENCH_PUSH_FALLBACK_REV_RANGE: ${{ needs._create_configuration.outputs.commitizen-rev-range }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJSON(needs._create_configuration.outputs.python-versions) }}

    steps:
      - name: Commit Lint Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Commit Lint Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          source ./.github/scripts/pushed_commit_range.sh
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Commit Lint Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Commit Lint Test -- Install Poetry
        run: |
          source ./.github/scripts/poetry.sh "install-poetry"

      - name: Commit Lint Test -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs

      - name: Commit Lint Test -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Commit Lint Test -- Install Requirements
        run: |
          source ./.github/scripts/poetry.sh "install-project"

      - name: Commit Lint Test -- Lint Pushed Commits
        run: |
          poetry run cz check --rev-range "${PUSHED_COMMIT_REV_RANGE}"

      - name: Commit Lint Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: commit lint checks succeeded!"

      - name: Commit Lint Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: commit lint checks failed!"

  create_release:
    needs: {% endraw %}[_create_configuration, _start_notification, commit_lint_test, documentation_test, molecule_lint_test, molecule_test, security_test,{% if cookiecutter.optional_toml_linting == 'true' %} toml_lint_test,{% endif %} yaml_lint_test]{% raw %}

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Create Release -- Branch Filter
        id: branch_filter
        run: |
          source .github/scripts/release_candidate.sh "${{ github.event.ref }}"

      - name: Create Release -- Checkout Repository (All Commits)
        if: steps.branch_filter.outputs.release_candidate == 'TRUE'
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.branch_filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Install Poetry
        if: steps.branch_filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/poetry.sh "install-poetry"

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.branch_filter.outputs.release_candidate == 'TRUE'
        run: |
          source ./.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.branch_filter.outputs.release_candidate == 'TRUE'
        run:
          source ./.github/scripts/changelog.sh

      - name: Create Release -- Generate GitHub Release Draft
        if: steps.branch_filter.outputs.release_candidate == 'TRUE'
        id: create_release
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_SCRIPT }}{% raw %}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.github/scripts/release.js')
            const body = process.env.CHANGE_LOG_CONTENT;
            const tag = process.env.BRANCH_OR_TAG;
            await script({ body, context, core, github, tag })

      - name: Create Release -- Report Job Status (Success)
        if: steps.branch_filter.outputs.release_candidate == 'TRUE'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USER_NAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Documentation Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_MARKDOWN_LINK_CHECK }}{% raw %}
        with:
          config-file: './.github/config/actions/gaurav-nelson-github-action-markdown-link-check.json'
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation test was successful!"

      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation test has failed!"

  molecule_lint_test:
    needs: [_create_configuration]

    runs-on: ubuntu-latest
    strategy:
      max-parallel: {% endraw %}{{ cookiecutter._GITHUB_CI_DEFAULT_CONCURRENCY }}{% raw %}
      matrix:
        python-version:  ${{ fromJSON(needs._create_configuration.outputs.python-versions) }}

    steps:

      - name: Molecule Lint Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          path: "role"

      - name: Molecule Lint Test -- Setup Environment
        run: |
          source ./role/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Lint Test -- Set up Python ${{ matrix.python-version }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Molecule Lint Test -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh "install-poetry"

      - name: Molecule Lint Test -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./role/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                        \
            ~/.cache

      - name: Molecule Lint Test -- Mount Ansible Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: ansible-${{ hashFiles('./role/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Molecule Lint Test -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Molecule Lint Test -- Install Requirements
        run: |
          cd role
          source ./.github/scripts/poetry.sh "install-project"

      - name: Molecule Lint Test -- Run Linter
        run: |
          cd role
          poetry run molecule lint

      - name: Molecule Lint Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: molecule linting was successful!"

      - name: Molecule Lint Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: molecule linting has failed!"

  molecule_test:
    needs: [_create_configuration]

    runs-on: ${{ matrix.molecule-test-platform }}
    strategy:
      max-parallel: {% endraw %}{{ cookiecutter._GITHUB_CI_DEFAULT_CONCURRENCY }}{% raw %}
      matrix:
        molecule-test-platform: ${{ fromJSON(needs._create_configuration.outputs.molecule-test-platforms) }}
        python-version: ${{ fromJSON(needs._create_configuration.outputs.python-versions) }}
        scenario: ${{ fromJSON(needs._create_configuration.outputs.molecule-scenarios) }}

    steps:
      - name: Molecule Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          path: "role"

      - name: Molecule Test -- Setup Environment
        run: |
          source ./role/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Test -- Set up Python ${{ matrix.python-version }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Molecule Test -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh "install-poetry"

      - name: Molecule Test -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./role/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                        \
            ~/.cache

      - name: Molecule Test -- Mount Ansible Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: ansible-${{ hashFiles('./role/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Molecule Test -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Molecule Test -- Install Requirements
        run: |
          cd role
          source ./.github/scripts/poetry.sh "install-project"

      - name: Molecule Test -- Reuse Cached Dependencies as Scenario
        run: |
          cd role
          poetry run molecule dependency
          mv ~/.cache/molecule/role/default ~/.cache/molecule/role/"${SCENARIO}"
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: Molecule Test -- Run ${{ matrix.scenario }} Scenario
        run: |
          cd role
          poetry run molecule test -s "${SCENARIO}"
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: Molecule Test -- Reuse Scenario Dependencies as Cache
        run: |
          mv ~/.cache/molecule/role/"${SCENARIO}" ~/.cache/molecule/role/default
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: Molecule Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: molecule test scenario '${SCENARIO}' was successful!"
        env:
          SCENARIO: ${{ matrix.scenario }}

      - name: Molecule Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: molecule test scenario '${SCENARIO}' has failed!"
        env:
          SCENARIO: ${{ matrix.scenario }}

  security_test:
    needs: [_create_configuration]

    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0

      - name: Security Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          source ./.github/scripts/pushed_commit_range.sh
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Trufflehog
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_TRUFFLEHOG }}{% raw %}
        with:
          base: ${{ env.PUSHED_COMMIT_START }}
          extra_args: ${{ needs._create_configuration.outputs.trufflehog-args }}
          head: ${{ env.BRANCH_OR_TAG }}
          path: .

      - name: Security Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  {%- endraw %}{% if cookiecutter.optional_toml_linting == 'true' %}

  toml_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Toml Lint Test -- Checkout Repository
        uses: {{ cookiecutter._GITHUB_ACTION_CHECKOUT }}

      - name: Toml Lint Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          sudo apt-get install -y golang-github-pelletier-go-toml
        env:
          WEBHOOK_URL: {{ '${{' }} secrets.SLACK_WEBHOOK {{ '}}' }}

      - name: Toml Lint Test -- Run Linter
        run: |
          find . -type f -name "*.toml" -exec tomll "{}" \;
          git diff --exit-code

      - name: Toml Lint Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: toml linting was successful!"

      - name: Toml Lint Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: toml linting has failed!"

  {%- endif %}{% raw %}

  yaml_lint_test:

    runs-on: ubuntu-latest

    steps:
      - name: Yaml Lint Test -- Checkout Repository
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}

      - name: Yaml Lint Test -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Yaml Lint Test -- Lint Rendered GitHub Workflows
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_YAMLLINT }}{% raw %}
        with:
          format: standard
          file_or_dir: .github/workflows/
          config_file: .yamllint.yml

      - name: Yaml Lint Test -- Report Job Status (Success)
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow linting was successful!"

      - name: Yaml Lint Test -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
{% endraw %}