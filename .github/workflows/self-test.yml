---
name: ansible-workbench-self-test

# Required Github Repository Secrets:
# REMOTE_TOKEN      - Github Token With Access To This Repo
# REMOTE_ORIGIN     - The git remote repository name (organization/repo)
# SLACK_WEBHOOK     - The slack webhook for build notifications

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

env:
  ANSIBLE_WORKBENCH_BRANCH_NAME_BASE: "master"
  ANSIBLE_WORKBENCH_BRANCH_NAME_DEVELOPMENT: "dev"
  PROJECT_NAME: "ansible-workbench"
  USERNAME: "niall-byrne"
  TEMPLATED_NAME: "flower-generator"
  VERBOSE_NOTIFICATIONS: 0

jobs:

  _create_configuration:

    runs-on: ubuntu-latest
    outputs:
      configuration: ${{ steps.read_configuration.outputs.configuration }}

    steps:
      - name: Create Configuration -- Checkout Repository
        uses: actions/checkout@v3

      - name: Create Configuration -- Set Cookiecutter Configuration as Output
        id: read_configuration
        run: |
          {
            echo "configuration<<EOF"
              cat cookiecutter.json
            echo "EOF"
          } >> $GITHUB_OUTPUT

  _start_notification:

    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Start -- Setup Environment
        run: |
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  _success_notification:
    needs: [create_release]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Success -- Setup Environment
        run: |
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  create_release:
    needs: [push_repository_test]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout Repository
        uses: actions/checkout@v3

      - name: Create Release -- Branch Filter
        id: branch_filter
        run: |
          source ./{{cookiecutter.project_slug}}/.github/scripts/branch_filter.sh "${{ github.event.ref }}"

      - name: Create Release -- Checkout Repository (All Commits)
        if: steps.branch_filter.outputs.match == 'TRUE'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./{{cookiecutter.project_slug}}/.github/scripts/setup.sh
          echo "{}" > package.json
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Install Poetry
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./{{cookiecutter.project_slug}}/.github/scripts/poetry.sh "install-poetry"

      - name: Create Release -- Check 'pyproject.toml' Matches Tag
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          source ./{{cookiecutter.project_slug}}/.github/scripts/version.sh

      - name: Create Release -- Generate Changelog
        if: steps.branch_filter.outputs.match == 'TRUE'
        run:
          source ./{{cookiecutter.project_slug}}/.github/scripts/changelog.sh

      - name: Create Release -- Create Github Release
        if: steps.branch_filter.outputs.match == 'TRUE'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ env.CHANGE_LOG_CONTENT }}
            ## Deployment Checklist
            - [ ] Ensure documentation is accurate
            - [ ] Ensure git commits are properly formatted
          draft: true
          prerelease: false

      - name: Create Release -- Report Job Status on Success
        if: steps.branch_filter.outputs.match == 'TRUE'
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created!\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release creation has failed!"

  documentation_test:
    needs: [_create_configuration]

    runs-on: ubuntu-latest
    env:
      ANSIBLE_WORKBENCH_SKIP_POETRY: 1
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(needs._create_configuration.outputs.configuration)._GITHUB_CI_PYTHON_VERSIONS }}

    steps:
      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Documentation Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Documentation Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Documentation Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh

      - name: Documentation Test -- Check Markdown Links For Template
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: 'template/{{cookiecutter.project_slug}}/.github/config/markdown.link.check.json'
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'template, template/.github/workflows'
          max-depth: 1

      - name: Documentation Test -- Check Markdown Links For Rendered Template
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: ${{ env.TEMPLATED_NAME }}
          max-depth: -1

      - name: Documentation Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation checks succeeded!"

      - name: Documentation Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation checks failed!"

  molecule_lint_test:
    needs: [_create_configuration]

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(needs._create_configuration.outputs.configuration)._GITHUB_CI_PYTHON_VERSIONS }}

    steps:
      - name: Molecule Lint Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: MMolecule Lint Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Molecule Lint Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Molecule Lint Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Molecule Lint Test -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/ansible_cache.sh  \
            "$(pwd)/ansible_cache"                                                          \
            ~/.cache

      - name: Molecule Lint Test -- Mount Ansible Cache
        uses: actions/cache@v3
        with:
          key: ansible-${{ hashFiles('./template/{{cookiecutter.project_slug}}/requirements.yml') }}-${{ env.CACHE_TTL }}
          path: ansible_cache

      - name: Molecule Lint Test -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./template/{{cookiecutter.project_slug}}/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Molecule Lint Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh

      - name: Molecule Lint Test -- Lint Rendered Template With Default Scenario
        run: |
          cd "${TEMPLATED_NAME}"
          poetry run molecule lint

      - name: Molecule Lint Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: molecule linting checks succeeded!"

      - name: Molecule Lint Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: molecule linting checks failed!"

  push_repository_test:
    needs: [_create_configuration, _start_notification, documentation_test, molecule_lint_test, security_test, shellcheck_test, yaml_lint_test]

    runs-on: ubuntu-latest
    env:
      ANSIBLE_WORKBENCH_SKIP_POETRY: 1
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(needs._create_configuration.outputs.configuration)._GITHUB_CI_PYTHON_VERSIONS }}

    steps:
      - name: Push Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'
          persist-credentials: false

      - name: Push Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Push Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Push Test -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Push Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh "GitHub Action" "action@github.com"

      - name: Push Test -- Clean Up Tags for Git Push
        run: |
          cd ${TEMPLATED_NAME}
          git checkout master
          git tag --delete 0.0.0  # Don't Repush
          git tag 0.1.0

      - name: Push Test -- Push To Test Repository (master)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: master
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (production)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: false
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Push To Test Repository (release tag)
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REMOTE_TOKEN }}
          branch: production
          tags: true
          directory: ${{ env.TEMPLATED_NAME }}
          repository: ${{ secrets.REMOTE_ORIGIN }}
          force: true

      - name: Push Test -- Trigger Release Workflow Test
        run: |
          gh workflow run -r "${TEST_PUSH_TAG}" -R "${USER_NAME}/${TEMPLATED_NAME}" release.yml -f "TAG=${TEST_PUSH_TAG}"
        env:
          GITHUB_TOKEN: ${{ secrets.REMOTE_TOKEN }}

      - name: Push Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: push has been triggered!"

      - name: Push Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: push failed to trigger!"

  security_test:

    runs-on: ubuntu-latest

    steps:
      - name: Security Test Repo -- Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Security Test Repo -- Setup Environment
        run: |
          source ./{{cookiecutter.project_slug}}/.github/scripts/setup.sh
          source ./{{cookiecutter.project_slug}}/.github/scripts/pushed_commit_range.sh
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Trufflehog
        uses: trufflesecurity/trufflehog@v3.27.1
        with:
          path: .
          base: ${{ env.PUSHED_COMMIT_RANGE }}
          head: ${{ env.BRANCH_OR_TAG }}

      - name: Security Test Repo -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks succeeded!"

      - name: Security Test Repo -- Report Job Status on Failure
        if: failure()
        run: |
          ./{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  shellcheck_test:
    needs: [_create_configuration]

    runs-on: ubuntu-latest
    env:
      ANSIBLE_WORKBENCH_SKIP_POETRY: 1
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(needs._create_configuration.outputs.configuration)._GITHUB_CI_PYTHON_VERSIONS }}

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Shellcheck -- Setup Environment
        run: |
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Shellcheck -- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Shellcheck -- Render Template
        run: |
          source ./template/.github/scripts/template.sh

      - name: Shellcheck -- Shellcheck Scripts
        run: |
          shellcheck ./template/hooks/*.sh
          shellcheck ./template/scripts/*.sh
          shellcheck ./template/.github/scripts/*.sh

      - name: Shellcheck -- Shellcheck Rendered Scripts
        run: |
          shellcheck ${TEMPLATED_NAME}/.github/scripts/*.sh

      - name: Shellcheck -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: shellcheck checks succeeded!"

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  yaml_lint_test:
    needs: [_create_configuration]

    runs-on: ubuntu-latest
    env:
      ANSIBLE_WORKBENCH_SKIP_POETRY: 1
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(needs._create_configuration.outputs.configuration)._GITHUB_CI_PYTHON_VERSIONS }}

    steps:
      - name: Yaml Lint Test -- Checkout Repository
        uses: actions/checkout@v3
        with:
          path: 'template'

      - name: Yaml Lint Test -- Setup Environment
        run: |
          source ./template/{{cookiecutter.project_slug}}/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Yaml Lint Test -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Yaml Lint Test-- Install Template Requirements
        run: |
          source ./template/.github/scripts/requirements.sh

      - name: Yaml Lint Test -- Render Template
        run: |
          source ./template/.github/scripts/template.sh

      - name: Yaml Lint Test -- Lint Template GitHub Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./template/.github/workflows
          config_file: ./${{ env.TEMPLATED_NAME }}/.yamllint.yml

      - name: Yaml Lint Test -- Lint Rendered GitHub Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./${{ env.TEMPLATED_NAME }}/.github/workflows/*.yml -c ./${{ env.TEMPLATED_NAME }}/.yamllint.yml
          config_file: ./${{ env.TEMPLATED_NAME }}/.yamllint.yml

      - name: Yaml Lint Test -- Report Job Status on Success
        if: env.VERBOSE_NOTIFICATIONS == '1'
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: YAML linting checks succeeded!"

      - name: Yaml Lint Test -- Report Job Status on Failure
        if: failure()
        run: |
          ./template/{{cookiecutter.project_slug}}/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: YAML linting checks failed!"
