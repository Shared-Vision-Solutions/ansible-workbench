---
name: {{ cookiecutter.project_slug }}-publish-to-galaxy

# Workflow Secrets:
# SLACK_WEBHOOK              (Optional, for Slack notifications...)
# GALAXY_API_KEY             (Optional, for Ansible Galaxy Import...)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      TAG:
        description: 'Tag to Deploy'
        required: true
        default: ''

env:
  PROJECT_NAME: "{{ cookiecutter.project_slug }}"
  PYTHON_VERSIONS: '{{ cookiecutter._GITHUB_CI_PYTHON_VERSIONS | tojson }}'
  USER_NAME: "{{ cookiecutter.github_handle }}"

{% raw %}
jobs:

  _create_configuration:

    runs-on: ubuntu-latest
    outputs:
      publish_to_galaxy: ${{ steps.check_for_api_key.outputs.publish_to_galaxy }}

    steps:
      - name: Create Configuration -- Set Publish to Galaxy as Output
        id: check_for_api_key
        run: |
          [[ -n "${API_KEY}" ]] && PUBLISH_TO_GALAXY="true" || PUBLISH_TO_GALAXY="false"
          echo "publish_to_galaxy=${PUBLISH_TO_GALAXY}" >> $GITHUB_OUTPUT
        env:
          API_KEY: ${{ secrets.GALAXY_API_KEY }}

  publish_to_galaxy:
    needs: [_create_configuration]

    if: needs._create_configuration.outputs.publish_to_galaxy == 'true'
    runs-on: ubuntu-latest

    steps:

      - name: Publish to Galaxy -- Code Checkout (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0
          path: 'role'
          ref: ${{ github.event.inputs.TAG  }}

      - name: Publish to Galaxy -- Code Checkout (published release)
        if: github.event_name != 'workflow_dispatch'
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CHECKOUT }}{% raw %}
        with:
          fetch-depth: 0
          path: 'role'

      - name: Publish to Galaxy -- Setup Environment
        run: |
          source ./role/.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Publish to Galaxy -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh "install-poetry"

      - name: Publish to Galaxy -- Set up Python ${{ fromJSON(env.PYTHON_VERSIONS)[0] }}
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_PYTHON }}{% raw %}
        with:
          python-version: ${{ fromJSON(env.PYTHON_VERSIONS)[0] }}

      - name: Publish to Galaxy -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs

      - name: Publish to Galaxy -- Mount Poetry Cache
        uses: {% endraw %}{{ cookiecutter._GITHUB_ACTION_CACHE }}{% raw %}
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs

      - name: Publish to Galaxy -- Install Requirements
        run: |
          cd role
          source ./.github/scripts/poetry.sh "install-project"

      - name: Publish to Galaxy -- Trigger Ansible Galaxy Import
        run: |
          cd role
          poetry run ansible-galaxy role import ${USER_NAME} ${PROJECT_NAME} --token ${API_KEY} | tee import.log
          grep "0 errors" import.log
        env:
          API_KEY: ${{ secrets.GALAXY_API_KEY }}

      - name: Publish to Galaxy -- Report Job Status (Success)
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated ansible galaxy import has been completed!"

      - name: Publish to Galaxy -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated ansible galaxy import has failed!"
{% endraw %}